#include <windows.h>
#include "strsafe.h"
#include <math.h>
#include <ctime>

#define NUM 1000
#define TWOPI (2*3.14159)
#define LINEHEIGHT 15
#define MAXPTS 100
#define PLAYING_TIMERID 1

//贪吃蛇
struct Snake { POINT pts[MAXPTS];int size, dx, dy, R, G, B; };
Snake snake;
//游戏区域
int xside = 100, yside = 90;
int xdivisions = 20, ydivisions = 18;
int xlength = 2 * xside, ylength = 2 * yside;
int block = xlength / xdivisions; //设置参数时确保能整除且xblock=yblock且block为偶数
int r = block / 2;//蛇节宽度
int snakespeed = 500;//500ms

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, int iCmdShow)
{
	static TCHAR szAppName[] = TEXT("MyWindows");
	HWND hwnd;
	MSG msg;
	WNDCLASS wndclass;

	wndclass.style = CS_HREDRAW | CS_VREDRAW;
	wndclass.lpfnWndProc = WndProc;
	wndclass.cbClsExtra = 0;
	wndclass.cbWndExtra = 0;
	wndclass.hInstance = hInstance;
	wndclass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wndclass.hCursor = LoadCursor(NULL, IDC_ARROW);
	wndclass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	wndclass.lpszMenuName = NULL;
	wndclass.lpszClassName = szAppName;

	if (!RegisterClass(&wndclass))
	{
		MessageBox(NULL, TEXT("这个程序需要在 windows NT 才能运行!"), szAppName, MB_ICONERROR);
		return 0;
	}

	hwnd = CreateWindow(
		szAppName,
		TEXT("SCU工作室"),
		WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT,
		CW_USEDEFAULT,
		CW_USEDEFAULT,
		CW_USEDEFAULT,
		NULL,
		NULL,
		hInstance,
		NULL
	);

	//初始化贪吃蛇
	snake.size = 2;
	snake.dx = 1, snake.dy = 0;
	snake.pts[0].x = -xside + 3 * block - block / 2;
	snake.pts[0].y = -yside + 5 * block - block / 2;
	snake.pts[1].x = -xside + 3 * block - block / 2;
	snake.pts[1].y = -yside + 6 * block - block / 2;

	ShowWindow(hwnd, iCmdShow);
	UpdateWindow(hwnd);

	while (GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}

	return msg.wParam;
}

LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	PAINTSTRUCT ps;
	int i;
	RECT rect;
	static int cxClient, cyClient;
	int iMapMode;
	static HGDIOBJ hPen, hOldPen;
	static HBRUSH hBrush, hOldBrush;

	switch (message)
	{
	case WM_CREATE:
		SetTimer(hwnd, PLAYING_TIMERID, snakespeed, NULL);
		return 0;

	case WM_SIZE:
		cxClient = LOWORD(lParam);
		cyClient = HIWORD(lParam);
		return 0;

	case WM_KEYDOWN:
		switch (wParam)
		{
		case (int)'w':case (int)'W':
			snake.dx = 0, snake.dy = 1; //MessageBox(hwnd, TEXT("ojbk!"), TEXT(""), MB_OK);
			return 0;

		case (int)'a':case (int)'A':
			snake.dx = -1, snake.dy = 0;
			return 0;

		case (int)'s':case (int)'S':
			snake.dx = 0, snake.dy = -1;
			return 0;

		case (int)'d':case (int)'D':
			snake.dx = 1, snake.dy = 0;
			return 0;
		}
		return 0;

	case WM_TIMER:
		//食物的处理
		struct Food{int x,y;};
		Food food;
		//更改蛇的位置
		int lastx=snake.pts[snake.size].x;
		int lasty=snake.pts[snake.size].y;
		for (i = snake.size - 1; i > 0; i--)
		{
			snake.pts[i].x = snake.pts[i - 1].x;
			snake.pts[i].y = snake.pts[i - 1].y;
		}
		snake.pts[0].x += snake.dx * block;
		snake.pts[0].y += snake.dy * block;
		//如果蛇头在食物处或,更改蛇的size,重新生成食物
		if(snake.pts[0].x==food.x && snake.pts[0].y==food.y)
		{
			snake.size++;
			snake.pts[snake.size].x=lastx;
			snake.pts[snake.size].y=lasty;
		}
		
		//死亡判断(碰到边界/蛇身/障碍物)

		InvalidateRect(hwnd, NULL, TRUE);//发送重画窗口的消息
		return 0;

	case WM_PAINT:
		hdc = BeginPaint(hwnd, &ps);

		iMapMode = GetMapMode(hdc);
		SetMapMode(hdc, MM_ISOTROPIC);

		SetWindowExtEx(hdc, 100, 100, NULL);//窗口范围设为100，100
		SetViewportExtEx(hdc, cxClient / 2, -cyClient / 2, NULL);
		SetViewportOrgEx(hdc, cxClient / 2, cyClient / 2, NULL);

		//全局背景

		//游戏背景

		//游戏边界
		Rectangle(hdc, -xside, yside, xside, -yside);
		//游戏方格
		hPen = CreatePen(PS_SOLID, 0, RGB(0, 0, 0));//默认条件下填充非实线的是白色
		hOldPen = SelectObject(hdc, hPen);
		SetBkMode(hdc, TRANSPARENT);
		for (i = 1; i < xdivisions; i++)
		{
			MoveToEx(hdc, -xside + block * i, yside, NULL);
			LineTo(hdc, -xside + block * i, -yside);
		}

		for (i = 1; i < ydivisions; i++)
		{
			MoveToEx(hdc, xside, -yside + block * i, NULL);
			LineTo(hdc, -xside, -yside + block * i);
		}
		SelectObject(hdc, hOldPen);
		//食物
			
		//贪吃蛇
			//一部分初始化暂时放在switch外面
		snake.R = 255, snake.G = 0, snake.B = 0;
		//hPen = CreatePen(PS_SOLID, 1, RGB(snake.R, snake.G, snake.B));
		//SelectObject(hdc, hPen);//若取消注释则这两行把边框也变为蛇的颜色
		hBrush = CreateSolidBrush(RGB(snake.R, snake.G, snake.B));
		SelectObject(hdc, hBrush);

		for (i = 0; i < snake.size; i++)
		{
			LONG& x = snake.pts[i].x;
			LONG& y = snake.pts[i].y;
			Rectangle(hdc, x - r, y + r, x + r, y - r);
		}

		EndPaint(hwnd, &ps);
		return 0;

	case WM_CLOSE:
		if (MessageBox(hwnd, TEXT("确认要关闭窗口吗?"), TEXT("请确认"), MB_YESNO) == IDYES)
			DestroyWindow(hwnd);
		else return 0;

	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;
	}

	return DefWindowProc(hwnd, message, wParam, lParam);
}
